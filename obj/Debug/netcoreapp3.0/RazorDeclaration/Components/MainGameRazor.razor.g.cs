#pragma checksum "C:\C#\WebGame_database\FileZillaLinuxGame\WebGame_school_AND_BLAZOR_20_Layout_in_the_middle\Components\MainGameRazor.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "26bdb3e0447b4124e206113a72d2b916a5e33d12"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WebGame.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 5 "C:\C#\WebGame_database\FileZillaLinuxGame\WebGame_school_AND_BLAZOR_20_Layout_in_the_middle\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\C#\WebGame_database\FileZillaLinuxGame\WebGame_school_AND_BLAZOR_20_Layout_in_the_middle\Components\MainGameRazor.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\C#\WebGame_database\FileZillaLinuxGame\WebGame_school_AND_BLAZOR_20_Layout_in_the_middle\Components\MainGameRazor.razor"
using WebGame.Data;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Game/MainGameRazor/{error}/{player1Id}/{player2Id}/{worldId}/{accountCheck}")]
    public partial class MainGameRazor : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 294 "C:\C#\WebGame_database\FileZillaLinuxGame\WebGame_school_AND_BLAZOR_20_Layout_in_the_middle\Components\MainGameRazor.razor"
       

    private string cord;
    private int towerLvl;
    private int defence;
    private int costs;

    private int towerId;
    private int owner;
    private int player1Id;
    private int player2Id;
    private int worldId;

    private int nxtTowerLvl;
    private int nxtDefence;

    private int? attack;

    private string x;
    private string y;
    public bool showMessage2Activated = false;

    private int whoOwnsTower = 0; // 0 = neutral, 1 = Friendly, 2 = Enemy


    private void Enemy(MouseEventArgs e,
   int TowerId, int Owner, int Player1Id, int Player2Id, int WorldId)
    {
        whoOwnsTower = 2;

        x = Convert.ToString(e.ClientX + 5) + "px";
        y = Convert.ToString(e.ClientY + 5) + "px";


        towerId = TowerId;
        owner = Owner;
        player1Id = Player1Id;
        player2Id = Player2Id;
        worldId = WorldId;
        // LoggedInAccountId


        showMessage2Activated = true;
    }

    private void CloseMessage2(MouseEventArgs e, bool closed)
    {
        showMessage2Activated = false;
    }

    private void Friendly(MouseEventArgs e,
        int TowerLvl, int Defence, int Costs, int TowerId, int Owner, int Player1Id, int Player2Id, int WorldId, int NxtTowerLvl, int NxtDefence, int? Attack)
    {
        whoOwnsTower = 1;

        x = Convert.ToString(e.ClientX + 5) + "px";
        y = Convert.ToString(e.ClientY + 5) + "px";
        towerLvl = TowerLvl;
        defence = Defence;
        costs = Costs;

        towerId = TowerId;
        owner = Owner;
        player1Id = Player1Id;
        player2Id = Player2Id;
        worldId = WorldId;
        // LoggedInAccountId
        attack = Attack;

        nxtTowerLvl = NxtTowerLvl;
        nxtDefence = NxtDefence;

        showMessage2Activated = true;
    }



    [Parameter]
    public int YourId { get; set; }

    [Parameter]
    public string YourName { get; set; }

    [Parameter]
    public int EnemyId { get; set; }

    [Parameter]
    public string EnemyName { get; set; }

    [Parameter]
    public string Winner { get; set; }



    [Parameter]
    public bool IsWinner { get; set; }

    [Parameter]
    public string you { get; set; }

    [Parameter]
    public string enemy { get; set; }

    [Parameter]
    public List<WebGame.ViewModel.TowerViewModel> towers { get; set; }

    [Parameter]
    public string error { get; set; }


    [Parameter]
    public int playerIdWhoClicks { get; set; }

    [Parameter]
    public int loggedInAccountId { get; set; }

    [Parameter]
    public int? test1 { get; set; }
    protected override void OnInitialized()
    {
        test1 = test1 ?? 0;
        //if (test1 != null)
        //{
        //    test1 = test1;
        //}
        //else
        //{
        //    test1 = 0;
        //}

        //base.OnInitialized();
    }


    private testModel[] testmodel_;


    protected override async Task OnInitializedAsync()
    {

        //testmodel_ = await TestService.test2(DateTime.Now);
        //testmodel_ = await ForecastService.test2(DateTime.Now);

    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TestService TestService { get; set; }
    }
}
#pragma warning restore 1591
