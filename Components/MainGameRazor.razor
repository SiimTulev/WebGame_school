@*@page "/Game/MainGameRazor/{player1Id}/{player2Id}/{worldId}/{accountCheck}"*@
@page "/Game/MainGameRazor/{error}/{player1Id}/{player2Id}/{worldId}/{accountCheck}"

@using System.Security.Claims;
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Forms
@using WebGame.Data
@using WebGame.ViewModel
@using WebGame.Models.WebGame
@using Microsoft.EntityFrameworkCore

@*@using WebGame.ViewComponents*@
@using WebGame.Components
@inject NavigationManager NavigationManager
@inject OverallStatsLogic OverallStats
@inject MainGameLogic MainGame
@inject DbContextOptions<webgameContext> DbContextOptions

@inject OverallStatsLogic _OverallStats
@* TODO:
    Update Money, etc after update click



*@

@*@Component.InvokeAsync("OverallStats", new { worldId = ViewBag.WorldId, playerId = ViewBag.PlayerIdWhoClicks })
    <OverallStats />*@
@*<TestVar UserName="Siim"/>*@

@*<Test />*@

<h1>test: @test</h1>

<div class="OverallStats">
    @{
        if (IsWinner != true)
        {
            <h1 class="ReadyLBL">
                @{


                    // show enemy
                    if (_enemy != "" && _you != "" && _you.Contains("NOT") == false && _enemy.Contains("NOT") && _hubConnection.ConnectionId != _connectionId)
                    {
                        <span class="NOT">YOU ARE NOT READY</span> <a class="white">-|-</a> <span> ENEMY IS READY</span>
                    }
                    // show enemy
                    else if (_enemy != "" && _you != "" && _you.Contains("NOT") && _enemy.Contains("NOT") && _hubConnection.ConnectionId != _connectionId)
                    {
                        <span class="NOT">YOU ARE NOT READY</span> <a class="white">-|-</a> <span class="NOT"> ENEMY IS NOT READY</span>
                    }

                    // show clicker
                    else if (_enemy != "" && _you != "" && _you.Contains("NOT") && _enemy.Contains("NOT") && _hubConnection.ConnectionId == _connectionId)
                    {
                        <span class="NOT">@_you</span> <a class="white">-|-</a> <span class="NOT"> @_enemy</span>
                    }
                    // show clicker
                    else if (_enemy != "" && _you != "" && _you.Contains("NOT") == false && _enemy.Contains("NOT") && _hubConnection.ConnectionId == _connectionId)
                    {
                        <span>@_you</span> <a class="white">-|-</a> <span class="NOT"> @_enemy</span>
                    }
                    // show clicker
                    else if (_enemy != "" && _you != "" && _you.Contains("NOT") == false && _enemy.Contains("NOT") == false && _hubConnection.ConnectionId == _connectionId)
                    {
                        <span class="NOT">@_you</span> <a class="white">-|-</a> <span> @_enemy</span>
                    }


                    if (_enemy == "")
                    {
                        if (you.Contains("NOT"))
                        {
                            <span class="NOT">@you</span> <a class="white">-|-</a>
                        }
                        else
                        {
                            @you <a class="white">-|-</a>
                        }

                        if (enemy.Contains("NOT"))
                        {
                            <span class="NOT">@enemy</span>
                        }
                        else
                        {
                            @enemy
                        }
                    }
                }

            </h1>
            <div class="buttons">
                <div class="content-3d Ready">
                    @*<a asp-action="PlayerReady" asp-route-worldId="@ViewBag.WorldId" class="btn-3d green">Ready</a>*@

                    <a class="btn-3d green" href="/Game/PlayerReady/@towers[0].WorldId">Ready</a>
                    <button class="btn-3d green" @onclick="@( () => Ready(towers[0].WorldId, playerIdWhoClicks))">Ready SignalR</button>


                </div>

                <div class="content-3d CancelArmyMovement">
                    @*<a asp-action="CancelArmyMovement" asp-route-worldId="@ViewBag.WorldId" asp-route-PlayerIdWhoClicks="@ViewBag.PlayerIdWhoClicks" asp-route-player1Id="@ViewBag.Player1Id" asp-route-player2Id="@ViewBag.Player2Id" class="btn-3d red">Movements</a>*@
                    <a class="btn-3d red" href="/Game/CancelArmyMovement/@towers[0].WorldId/@playerIdWhoClicks/@towers[0].Player1Id/@towers[0].Player2Id">Movements</a>

                </div>
            </div>
        }
        else
        {
            <h2>WINNER</h2>
            <h1>@Winner</h1>
            <h2>WINNER</h2>
        }
    }
</div>


<div class="Stats1">
    <a class="PlayerNames btn btn-primary" href="/Game/Profile/@YourId">@YourName</a>
    VS
    <a class="PlayerNames btn btn-primary" href="/Game/Profile/@EnemyId">@EnemyName</a>
    <br />
    @{
        if (error != null)
        {
            <div class="alert alert-danger Error" role="alert">  @error</div>
        }
    }
</div>

<br />
<br />

@{
    if (_notification && _hubConnection.ConnectionId != _connectionId) // Dont show updater NOTIFICATION
    {
        <h1>NOTIFICATED!</h1>
    }
}
<h1>NOTIFICATION.....</h1>
<h1>@_notification</h1>
<h1>NOTIFICATION.....</h1>



<h1>PLAYERS READY </h1>

@*@foreach (var _world in world)
    {
        <h2>Player1: @_world.Player1Ready</h2>
        <br />
        <h2>Player2: @_world.Player2Ready</h2>
        <h1>PLAYERS READY </h1>
    }*@


<div class="wrapper">

    @{
        int counter = 0;
        string towerOwnerColor = "";
    }
    @*@foreach (var item in towers)*@
    @foreach (var item in towerView)
    {

        counter++;
        string box = "box" + counter;
        if (item.Owner == playerIdWhoClicks)
        {
            towerOwnerColor = "friendly";
        }
        else if (item.Owner == 0)
        {
            towerOwnerColor = "empty";
        }
        else
        {
            towerOwnerColor = "enemy";
        }

        <div class="@box @towerOwnerColor">

            @{
                int TowerLvl;
                int Defence;
                int costs;
                int nxtTowerLvl;
                int nxtDefence;

                if (item.Owner == @playerIdWhoClicks)
                {
                    TowerLvl = item.TowerLvl;
                    Defence = (item.TowerLvl) * 5;
                    costs = (item.TowerLvl + 1) * 100;
                    nxtTowerLvl = item.TowerLvl + 1;
                    nxtDefence = (item.TowerLvl + 1) * 5;
                    <div class="darken">
                        <img src="..\images\greenRing.jpg" asp-append-version="true" alt="greenRing" style="width:10vh;" @onmousedown="@(e => Friendly(e,TowerLvl, @Defence,@costs, @item.TowerId, @item.Owner, @item.Player1Id, @item.Player2Id, @item.WorldId, nxtTowerLvl, nxtDefence, @item.Attack ))">

                        <a @onmousedown="@(e => Friendly(e,TowerLvl, @Defence,@costs, @item.TowerId, @item.Owner, @item.Player1Id, @item.Player2Id, @item.WorldId, nxtTowerLvl, nxtDefence, @item.Attack ))" class="inPicture">@item.TowerName.Substring(0, 1)</a>
                    </div>
                }
                else if (item.Owner != @playerIdWhoClicks && item.Owner != 0)
                {
                    <div class="darken">
                        <img src="..\images\redRing.jpg" asp-append-version="true" alt="redRing" style="width:10vh;" @onmousedown="@(e=> Enemy(e, @item.TowerId, @item.Owner, @item.Player1Id, @item.Player2Id, @item.WorldId))">
                        @*<a class="towerBTN " @onmousedown="@(e => Enemy(e, @item.TowerId, @item.Owner, @item.Player1Id, @item.Player2Id, @item.WorldId))">@item.TowerName</a>*@

                        <a @onmousedown="@(e=> Enemy(e, @item.TowerId, @item.Owner, @item.Player1Id, @item.Player2Id, @item.WorldId))" class="inPicture">@item.TowerName.Substring(0, 1)</a>
                    </div>
                }
                else if (item.Owner == 0)
                {
                    <div class="darken">

                        <a class="towerBTN " @onmousedown="@(e => Enemy(e, @item.TowerId, @item.Owner, @item.Player1Id, @item.Player2Id, @item.WorldId))">@item.TowerName</a>
                        <a @onmousedown="@(e=> Enemy(e, @item.TowerId, @item.Owner, @item.Player1Id, @item.Player2Id, @item.WorldId))" class="inPicture">@item.TowerName.Substring(0, 1)</a>
                    </div>
                }
            }
        </div>
    }
</div>
@{
    <div style="@(@showMessage2Activated ? "display:block" : "display:none")">

        <div class="cord">

            <button @onmousedown="@(e => CloseMessage2(e, false))">Close</button>

            @if (whoOwnsTower == 1)
            {
                <br />
                <a>Size: @attack</a>
                <br />
                <a>Costs: @costs</a>
                <br />
                <a>Lvl: @towerLvl->@nxtTowerLvl  </a>
                <br />
                <a> Def: @defence->@nxtDefence</a>
                <br />
                <a> Borns: @towerLvl % ->@nxtTowerLvl %</a>
                <br />
                <a class="btn btn-danger" href="/Game/CreateArmyMission/@worldId/@owner/@player1Id/@player2Id/@towerId/@playerIdWhoClicks">Move</a>

                <a class="btn btn-success" href="Game/UpgradeTower/@towerId/@loggedInAccountId/@owner/@player1Id/@player2Id/@worldId">Upgrade tower</a>

            }
            @if (whoOwnsTower == 2)
            {
                <br />
                <a class="towerLayout" href="/Game/CreateArmyMission/@worldId/@owner/@player1Id/@player2Id/@towerId/@playerIdWhoClicks">Move</a>


            }

            @if (whoOwnsTower == 0)
            {
                <br />
                <a class="btn btn-danger" href="/Game/CreateArmyMission/@worldId/@owner/@player1Id/@player2Id/@towerId/@playerIdWhoClicks">Move</a>
            }
        </div>
    </div>
}


@code {

    int test = 0;

    private HubConnection _hubConnection;

    bool _notification = false;
    string _connectionId = "";
    string _enemy = "";
    string _you = "";

    public List<TowerViewModel> towerView;
    bool _readyClicked = false;

    public List<TowerViewModel> world;



    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/notificationHub"))
        .Build();
        //towerView = await MainGame.MainGame(Player1Id, Player2Id, WorldId, 0);
        if (_hubConnection.ConnectionId != null) _connectionId = _hubConnection.ConnectionId;
        _notification = false;
        _readyClicked = false;




        //_hubConnection.On<bool, string, string, string, int, string, string, int, int>("ReceiveMessage", async (notification, connectionId,
        //    enemy, you, peopleNow, peopleGrowing, soonReturning, findPlayerGold, goldForTowers) =>
        _hubConnection.On<bool, string, string, string, bool, List<TowerViewModel>>("ReceiveMessage", async (notification, connectionId,
        enemyNotification, clickerNotification, readyClicked, towerz) =>
        {
            test++;
        //_context.Entry(_context).Reload();

        //towerView = await MainGame.MainGame(Player1Id, Player2Id, WorldId, 0);
        towerView = towerz;

            _notification = notification;
            _connectionId = connectionId;

            _enemy = enemyNotification;
            _you = clickerNotification;

            _readyClicked = readyClicked;
            StateHasChanged(); // Updates foregin account View who is in chat
    });
        towerView = await MainGame.MainGame(Player1Id, Player2Id, WorldId, 0);

        await _hubConnection.StartAsync();
    }



    private async Task Ready(int worldId, int playerId)
    {

        var towerz = await MainGame.PlayerReady(WorldId, playerId);


        var overallStats = await _OverallStats.GetOverallStats(worldId, towerz[0].Player1Id, towerz[0].Player2Id); // queue matters. WorldId first, etc.


        _hubConnection.SendAsync("SendOverallStats", overallStats, _hubConnection.ConnectionId);



        // NavigationManager.NavigateTo("/Game/PlayerReady/" + worldId, true);

        //        MainGame.PlayerReady(WorldId, playerId);
        //var towerz = MainGame.PlayerReady(WorldId, playerId);

        //var stats = OverallStats.GetOverallStats(worldId, playerIdWhoClicks);
        //var towerz = await MainGame.MainGame(Player1Id, Player2Id, WorldId, 0);

        //var data = GetAsync(worldId);

        // MainGame.PlayerReady(worldId);
        //_hubConnection.SendAsync("SendNotification", true, _hubConnection.ConnectionId, "ENEMY IS READY", "YOU ARE NOT READY");

        //_hubConnection.SendAsync("SendNotification", true, _hubConnection.ConnectionId, "ENEMY IS READY", stats.Result.PeopleGrowing, true, towerz);


        if (towerz[0].Player1Ready == false && towerz[0].Player2Ready == false)
        {
            _hubConnection.SendAsync("SendNotification", true, _hubConnection.ConnectionId, "ENEMY IS NOT READY", "YOU ARE NOT READY", true, towerz);
        }
        else if (towerz[0].Player1Id == playerId && towerz[0].Player1Ready == true && towerz[0].Player2Ready == false)
        {
            _hubConnection.SendAsync("SendNotification", true, _hubConnection.ConnectionId, "ENEMY IS NOT READY", "YOU ARE READY", true, towerz);
        }
        else if (towerz[0].Player1Id == playerId && towerz[0].Player1Ready == false && towerz[0].Player2Ready == true)
        {
            _hubConnection.SendAsync("SendNotification", true, _hubConnection.ConnectionId, "ENEMY IS READY", "YOU ARE NOT READY", true, towerz);
        }

        else if (towerz[0].Player2Id == playerId && towerz[0].Player1Ready == false && towerz[0].Player2Ready == true)
        {
            _hubConnection.SendAsync("SendNotification", true, _hubConnection.ConnectionId, "ENEMY IS NOT READY", "YOU ARE READY", true, towerz);
        }
        else if (towerz[0].Player2Id == playerId && towerz[0].Player1Ready == true && towerz[0].Player2Ready == false)
        {
            _hubConnection.SendAsync("SendNotification", true, _hubConnection.ConnectionId, "ENEMY IS READY", "YOU ARE NOT READY", true, towerz);
        }




        // _hubConnection.SendAsync("SendNotification", true, _hubConnection.ConnectionId, "ENEMY IS READY", true, towerz);


        //_hubConnection.SendAsync("SendNotification", true, _hubConnection.ConnectionId, "ENEMY IS READY", "YOU ARE NOT READY",
        //    stats.Result.PeopleNow, stats.Result.PeopleGrowing, stats.Result.SoonReturning,
        //    stats.Result.FindPlayerGold, stats.Result.goldForTowers); // Send notification
    }

    public bool IsConnected =>
_hubConnection.State == HubConnectionState.Connected;





    //private string cord;
    private int towerLvl;
    private int defence;
    private int costs;

    private int towerId;
    private int owner;
    private int player1Id;
    private int player2Id;
    private int worldId;

    private int nxtTowerLvl;
    private int nxtDefence;

    private int? attack;

    private string x;
    private string y;
    public bool showMessage2Activated = false;

    private int whoOwnsTower = 0; // 0 = neutral, 1 = Friendly, 2 = Enemy




    private void Enemy(MouseEventArgs e,
    int TowerId, int Owner, int Player1Id, int Player2Id, int WorldId)
    {
        whoOwnsTower = 2;

        x = Convert.ToString(e.ClientX + 5) + "px";
        y = Convert.ToString(e.ClientY + 5) + "px";


        towerId = TowerId;
        owner = Owner;
        player1Id = Player1Id;
        player2Id = Player2Id;
        worldId = WorldId;
        // LoggedInAccountId


        showMessage2Activated = true;
    }

    private void CloseMessage2(MouseEventArgs e, bool closed)
    {
        showMessage2Activated = false;
    }

    private void Friendly(MouseEventArgs e,
    int TowerLvl, int Defence, int Costs, int TowerId, int Owner, int Player1Id, int Player2Id, int WorldId, int NxtTowerLvl, int NxtDefence, int? Attack)
    {
        whoOwnsTower = 1;

        x = Convert.ToString(e.ClientX + 5) + "px";
        y = Convert.ToString(e.ClientY + 5) + "px";
        towerLvl = TowerLvl;
        defence = Defence;
        costs = Costs;

        towerId = TowerId;
        owner = Owner;
        player1Id = Player1Id;
        player2Id = Player2Id;
        worldId = WorldId;
        // LoggedInAccountId
        attack = Attack;

        nxtTowerLvl = NxtTowerLvl;
        nxtDefence = NxtDefence;

        showMessage2Activated = true;
    }

    [Parameter]
    public int WorldId { get; set; }
    [Parameter]
    public int Player1Id { get; set; }
    [Parameter]
    public int Player2Id { get; set; }

    [Parameter]
    public int YourId { get; set; }

    [Parameter]
    public string YourName { get; set; }

    [Parameter]
    public int EnemyId { get; set; }

    [Parameter]
    public string EnemyName { get; set; }

    [Parameter]
    public string Winner { get; set; }



    [Parameter]
    public bool IsWinner { get; set; }

    [Parameter]
    public string you { get; set; }

    [Parameter]
    public string enemy { get; set; }

    [Parameter]
    public List<WebGame.ViewModel.TowerViewModel>
    towers
    { get; set; }

    [Parameter]
    public string error { get; set; }


    [Parameter]
    public int playerIdWhoClicks { get; set; }

    [Parameter]
    public int loggedInAccountId { get; set; }

    [Parameter]
    public int? test1 { get; set; }
    protected override void OnInitialized()
    {
        test1 = test1 ?? 0;
        //if (test1 != null)
        //{
        //    test1 = test1;
        //}
        //else
        //{
        //    test1 = 0;
        //}

        //base.OnInitialized();
    }




    //protected override async Task OnInitializedAsync()
    //{

    //    //testmodel_ = await TestService.test2(DateTime.Now);
    //    //testmodel_ = await ForecastService.test2(DateTime.Now);

    //}
}


<style>

    .towerMenu {
        position: sticky;
        left: @x;
        top: @y;
        width: 50px;
        height: 100px;
    }

 .cord {
        position: fixed;
        left: @x;
        top: @y;
        width: 250px;
        height: 230px;
        background-color:aqua;
        }

    .darken {
        -webkit-transition: all 1s ease;
        -moz-transition: all 1s ease;
        -o-transition: all 1s ease;
        -ms-transition: all 1s ease;
        transition: all 1s ease;
    }

        .darken:hover {
            -webkit-filter: brightness(70%);
            filter: brightness(70%);
        }



    .inPicture {
        /* display: inline-block !important;
                position: relative;*/
        /* display: inline-block !important;
                position: absolute;
                padding-left: 4vh;
                padding-top: 3vh;
                margin-top: -7vh;*/
        /*   margin-top: -7vh;
                display: inline-block !important;
                position: absolute;
                padding-left: 4vh;*/
        margin-top: 3vh;
        display: inline-block !important;
        position: absolute;
        /* padding-left: 4vh; */
        margin-left: -5.7vh;
    }

    .towerBTN {
        margin-top: 20%;
    }

    .middle {
        margin-left: 30%;
        margin-top: -5%;
    }

    .upgrade {
        font-size: 17px;
    }

    .buttons {
        margin-left: 200px;
        text-align: center;
        margin-top: -15px;
    }

    .Ready {
        width: 50%;
        height: 0px;
    }

    .CancelArmyMovement {
        width: 120%;
        height: 0px; /* Siis tulevad mängija nimed üksteise kõrvale*/
    }

    @@media (max-width:991px) {
        .Ready {
            width: 30%;
        }

        .CancelArmyMovement {
            width: 130%;
        }
    }

    @@media (max-width: 767px) {
        .Ready {
            width: 10%;
        }

        .CancelArmyMovement {
            width: 200%;
        }
    }


    .btn-container, .container {
        background-color: white;
        border-radius: 4px;
        margin-bottom: 40px;
    }

    .btn-3d {
        position: relative;
        display: inline-block;
        font-size: 22px;
        padding: 20px 60px;
        color: white;
        margin: 20px 10px 10px;
        border-radius: 6px;
        text-align: center;
        transition: top .01s linear;
        text-shadow: 0 1px 0 rgba(0,0,0,0.15);
    }

        .btn-3d.green:hover {
            background-color: #87a86f;
        }

    .color .green {
        background: #82c8a0;
    }


    .btn-3d:active {
        top: 9px;
    }


    .btn-3d.green {
        background-color: #82c8a0;
        box-shadow: 0 0 0 1px #82c8a0 inset, 0 0 0 2px rgba(255,255,255,0.15) inset, 0 8px 0 0 rgba(126, 194, 155, .7), 0 8px 0 1px rgba(0,0,0,.4), 0 8px 8px 1px rgba(0,0,0,0.5);
    }

        .btn-3d.green:active {
            box-shadow: 0 0 0 1px #82c8a0 inset, 0 0 0 2px rgba(255,255,255,0.15) inset, 0 0 0 1px rgba(0,0,0,0.4);
        }

    .btn.green {
        box-shadow: 0px 4px 0px #87a86f;
    }

        .btn.green:active {
            box-shadow: 0 0 #87a86f;
            background-color: #87a86f;
        }

    .btn.green, .btn-two.green {
        background-color: #9abf7f;
    }

    .btn-gradient.green {
        background: rgba(130,200,160,1);
        background: -moz-linear-gradient(top, rgba(130,200,160,1) 0%, rgba(130,199,158,1) 100%);
        background: -webkit-gradient(left top, left bottom, color-stop(0%, rgba(130,200,160,1)), color-stop(100%, rgba(130,199,158,1)));
        background: -webkit-linear-gradient(top, rgba(130,200,160,1) 0%, rgba(130,199,158,1) 100%);
        background: -o-linear-gradient(top, rgba(130,200,160,1) 0%, rgba(130,199,158,1) 100%);
        background: -ms-linear-gradient(top, rgba(130,200,160,1) 0%, rgba(130,199,158,1) 100%);
        background: linear-gradient(to bottom, rgba(130,200,160,1) 0%, rgba(124, 185, 149, 1) 100%);
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#82c8a0', endColorstr='#82c79e', GradientType=0 );
    }

        .btn-gradient.green:active {
            background: #72B08E;
        }

    .btn.red, .btn-two.red {
        background-color: #fa5a5a;
    }

    .btn-3d.red:hover {
        background-color: #ff4c4b;
    }

    .btn-3d.red {
        background-color: #e74c3c;
        box-shadow: 0 0 0 1px #c63702 inset, 0 0 0 2px rgba(255,255,255,0.15) inset, 0 8px 0 0 #C24032, 0 8px 0 1px rgba(0,0,0,0.4), 0 8px 8px 1px rgba(0,0,0,0.5);
    }

        .btn-3d.red:active {
            box-shadow: 0 0 0 1px #c63702 inset, 0 0 0 2px rgba(255,255,255,0.15) inset, 0 0 0 1px rgba(0,0,0,0.4);
        }

    .btn.red {
        box-shadow: 0px 4px 0px #E04342;
    }

        .btn.red:active {
            box-shadow: 0 0 #ff4c4b;
            background-color: #ff4c4b;
        }


    .Error {
        top: 20px;
        font-size: 20px;
        left: 0px;
        margin-right: 160px;
    }

    .PlayerNames {
        font-size: 35px;
        color: mediumspringgreen;
        background-color: black;
        z-index: 1;
    }

    .Stats1 {
        font-size: 30px;
        left: 5%;
        right: 70%;
        top: 30px;
        position: fixed;
        z-index: 1;
    }

    @@media (max-width:1588px) {
        .Stats1 {
            font-size: 20px;
            margin-left: -1%;
        }
    }



    body {
        font-size: 100%;
    }

    .ReadyLBL {
        font-size: 30px;
        color: chartreuse;
        background-color: black;
        top: 50px;
        left: 60%;
        position: fixed;
        z-index: 1;
    }

    @@media (max-width:1588px) {
        .ReadyLBL {
            font-size: 23px;
            top: 52px;
        }
    }

    @@media (max-width:1180px) {
        .ReadyLBL {
            font-size: 20px;
            top: 52px;
        }
    }

    @@media (max-width:976px) {
        .ReadyLBL {
            font-size: 20px;
        }
    }

    .NOT {
        color: red;
    }

    .white {
        color: white !important;
    }

    .OverallStats {
        left: 26%;
    }

    .ReadyBTN {
        font-size: 40px;
        color: green;
        margin-right: 7%;
    }

    .CancelArmyMovementBTN {
        font-size: 40px;
        color: red;
    }


    * {
        box-sizing: border-box;
    }

    .wrapper {
        /*        border: 2px solid #f76707;*/
        /*border-radius: 50px;*/
        /*        background-color: #fff4e6;*/
        /*display: grid;
                        grid-template-columns: repeat(8, 11.25%);*/ /* 12.5%  185*/
        /*grid-template-rows: repeat(3, 22.5%);*/ /* 225   100*/
        /*width: 90%;*/ /*90%   1480px*/
        /*position: absolute;
                        left: 50%;
                        top: 577px;
                        transform: translate(-50%, -50%);
                        text-align: center;*/
        /*
                        border-radius: 50px;
                        display: inline-grid;
                        grid-template-columns: repeat(8, 12.5%);
                        grid-template-rows: repeat(3, 100%);
                        width: 80%;
                        position: absolute;
                        left: 50%;
                        top: 577px;
                        transform: translate(-50%, -50%);
                        margin-: auto;
                        text-align: center;
                        */
        /*display: grid;
                        grid-template-columns: repeat(8, 10vh);
                        grid-template-rows: repeat(3, 30.5%);
                        position: fixed;
                        left: 50%;
                        top: 577px;
                        transform: translate(-50%, -50%);
                        padding-right: 5%;
                        grid-auto-rows: minmax(100px, auto);*/
        /*   display: grid;
                    top: 300px;
                    width: 100%;
                    position: relative;*/
        /*        //////////////////*/
        grid-template-columns: repeat(8,10vh);
        /* width: 90%; */
        display: grid;
        top: 300px;
        /* width: 100%; */
        position: relative;
        padding-left: px;
        left: 15%;
    }

        .wrapper > .friendly {
            /*            border: 2px solid #ffa94d;
            */ /*            border-radius: 10px;*/
            background-color: lightgreen;
            /*            padding: 1em;*/
            color: black;
            width: 10vh;
            height: 10vh
        }

        .wrapper > .enemy {
            /*            border: 2px solid #ffa94d;
                        /*background-color: lightcoral;
                        color: black;
                        border: 2px solid #ffa94d;*/
            /* border-radius: 10px; */
            background-color: lightcoral;
            /* padding: 1em; */
            color: black;
            width: 10vh;
            height: 10vh
        }

        .wrapper > .empty {
            /*            border: 2px solid #ffa94d;
                        /*            border-radius: 10px;*/
            background-color: grey;
            /*            padding: 1em;*/
            color: black;
            width: 10vh;
            height: 10vh
        }


    .box1 {
        grid-column-start: 1;
        grid-row-start: 2;
    }

    .box2 {
        grid-column-start: 2;
        grid-row-start: 0;
    }

    .box3 {
        grid-column-start: 2;
        grid-row-start: 2;
    }

    .box4 {
        grid-column-start: 2;
        grid-row-start: 3;
    }

    .box5 {
        grid-column-start: 3;
        grid-row-start: 1;
    }

    .box6 {
        grid-column-start: 3;
        grid-row-start: 2;
    }

    .box7 {
        grid-column-start: 3;
        grid-row-start: 3;
    }

    .box8 {
        grid-column-start: 4;
        grid-row-start: 2;
    }

    .box9 {
        grid-column-start: 5;
        grid-row-start: 2;
    }

    .box10 {
        grid-column-start: 6;
        grid-row-start: 1;
    }

    .box11 {
        grid-column-start: 6;
        grid-row-start: 2;
    }

    .box12 {
        grid-column-start: 6;
        grid-row-start: 3;
    }

    .box13 {
        grid-column-start: 7;
        grid-row-start: 1;
    }

    .box14 {
        grid-column-start: 7;
        grid-row-start: 2;
    }

    .box15 {
        grid-column-start: 7;
        grid-row-start: 3;
    }

    .box16 {
        grid-column-start: 8;
        grid-row-start: 2;
    }
</style>
