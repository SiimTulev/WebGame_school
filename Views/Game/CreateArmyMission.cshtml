@model WebGame.ViewModel.EditViewModel
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.EntityFrameworkCore;
@using WebGame.Models.WebGame;
@using WebGame.ViewModel;
@using System.Security.Claims;

@{
    ViewData["Title"] = "CreateArmyMission";
}
<div class="OverallStats2">
    @await Component.InvokeAsync("OverallStats", new { worldId = ViewBag.WorldId, playerId = ViewBag.PlayerIdWhoClicks })
</div>

<div class="form">
    <h1 style="font-size:30px;" class="btn btn-danger nav-link">Create army mission</h1>
    <div>
        @*<a class="btn btn-info" asp-action="MainGame" asp-route-player1Id="@ViewBag.Player1Id" asp-route-player2Id="@ViewBag.Player2Id" asp-route-worldId="@ViewBag.WorldId" asp-route-accountCheck="@Convert.ToInt32(User.FindFirstValue(ClaimTypes.NameIdentifier))">Back to map</a>*@
        <a class="btn btn-info" asp-area="" asp-route-error="0" asp-route-player1Id="@ViewBag.Player1Id" asp-route-player2Id="@ViewBag.Player2Id" asp-route-worldId="@ViewBag.WorldId" asp-route-accountCheck="@Convert.ToInt32(User.FindFirstValue(ClaimTypes.NameIdentifier))" asp-controller="Game" asp-action="MainGameRazor">Back to map</a>

    </div>
    @{
        if (User.Identity.IsAuthenticated) // If account is logged in
        {
            if (ViewBag.Error != null)
            {
                <div class="alert alert-danger" role="alert">  @ViewBag.Error</div>
            }

            int selectedTower = @ViewBag.SelectedTower;
            int SelectedWorldId = @ViewBag.WorldId;
            var loggedInPlayerTowers = @ViewBag.loggedInPlayerTowers;

            var arrival = @ViewBag.Arrival;

            if (loggedInPlayerTowers != null)
            {
                if (loggedInPlayerTowers.Contains(selectedTower)) /*@*  Defender UI*@*/
                {
                    <div class="row">
                        <div class="col-md-4">
                            <form asp-area="" asp-controller="Game" asp-action="CreateArmyMission">
                                <div asp-validation-summary="All" class="text-danger"></div>

                                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                <input type="hidden" asp-for="SelectedTowerId" value="@selectedTower" />
                                <input type="hidden" asp-for="SelectedWorldId" value="@SelectedWorldId" />

                                <input type="hidden" asp-for="SelectedWorldId" value="@SelectedWorldId" />
                                <input type="hidden" asp-for="SelectedWorldId" value="@SelectedWorldId" />

                                @{
                                    //var count = Enumerable.Count(ViewBag.ListofTower);
                                    int counter = 0;

                                    foreach (var item in ViewBag.ListofTower)
                                    {
                                        if (item.TowerId != ViewBag.SelectedTower)
                                        {
                                            int towerId = item.TowerId;
                                            <div class="form-group">
                                                @item.TowerName

                                                @{ int maxSend = @item.Attack - 1; }
                                                <input  max="@maxSend" asp-for="TowerAttack[counter]" value="0" class="form-control" />
                                                MAX army to send - @maxSend
                                                <input type="hidden" asp-for="TowerId[counter]" value="@item.TowerId" />
                                                <br />
                                                <a>Arrival -> @arrival[counter]</a>
                                                <input type="hidden" asp-for="arrivingTime[counter]" value="@arrival[counter]" />
                                            </div>
                                            <input type="hidden" asp-for="xCord[counter]" value="@item.LocationX" class="form-control" /> @* HIDE IT*@
                                            <input type="hidden" asp-for="yCord[counter]" value="@item.LocationY" class="form-control" /> @* HIDE IT*@
                                            counter++;
                                        }
                                    }
                                    <a>Army moves together</a>
                                    <input class="tgl tgl-flip" id="cb5" name="connected" value="true" type="checkbox" />
                                    <label class="tgl-btn" data-tg-off="Nope" data-tg-on="Yeah!" for="cb5"></label>
                                }
                                <div class="form-group">
                                    <input type="submit" value="Create" class="btn btn-primary" />
                                </div>
                            </form>
                        </div>
                    </div>
                }
            }
            else @*  Attacker UI*@
            {
                <div class="row">
                    <div class="col-md-4">
                        <form asp-area="" asp-controller="Game" asp-action="CreateArmyMission">

                            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                            <input type="hidden" asp-for="SelectedTowerId" value="@selectedTower" />
                            <input type="hidden" asp-for="SelectedWorldId" value="@SelectedWorldId" />
                            @{
                                int counter = 0;

                                foreach (var item in ViewBag.ListofTower)
                                {
                                    int towerId = item.TowerId;
                                    <div class="form-group">
                                        @item.TowerName
                                        @{ int maxSend = @item.Attack - 1; }
                                        <input  max="@maxSend" asp-for="TowerAttack[counter]" value="0" class="form-control" />
                                        MAX army to send - @maxSend
                                        <input type="hidden" asp-for="TowerId[counter]" value="@item.TowerId" />
                                        <br />
                                        <a>Arrival -> @arrival[counter]</a>
                                        <input type="hidden" asp-for="arrivingTime[counter]" value="@arrival[counter]" />
                                    </div>
                                    <input type="hidden" asp-for="xCord[counter]" value="@item.LocationX" class="form-control" /> @* HIDE IT*@
                                    <input type="hidden" asp-for="yCord[counter]" value="@item.LocationY" class="form-control" /> @* HIDE IT*@
                                    counter++;
                                }
                                <a>Army moves together</a><span class="readyButton">
                                    <input class="tgl tgl-flip" id="cb5" name="connected" value="true" type="checkbox" />
                                    <label class="tgl-btn" data-tg-off="Nope" data-tg-on="Yeah!" for="cb5"></label>
                                </span>
                            }
                            <div class="form-group">
                                <input type="submit" value="Create" class="btn btn-primary" />
                            </div>
                        </form>
                    </div>
                </div>
            }
        }
    }
    <div>
        @*<a class="btn btn-info" asp-action="MainGame" asp-route-player1Id="@ViewBag.Player1Id" asp-route-player2Id="@ViewBag.Player2Id" asp-route-worldId="@ViewBag.WorldId" asp-route-accountCheck="@Convert.ToInt32(User.FindFirstValue(ClaimTypes.NameIdentifier))">Back to map</a>*@
        @*<a style="margin-top:50px;" class="btn btn-primary" asp-area="" asp-route-error="0" asp-route-player1Id="@item.Player1Id" asp-route-player2Id="@item.Player2Id" asp-route-worldId="@item.WorldId" asp-route-accountCheck="@Convert.ToInt32(User.FindFirstValue(ClaimTypes.NameIdentifier))" asp-controller="Game" asp-action="MainGameRazor">Join World</a>*@
        <a class="btn btn-info" asp-area="" asp-route-error="0" asp-route-player1Id="@ViewBag.Player1Id" asp-route-player2Id="@ViewBag.Player2Id" asp-route-worldId="@ViewBag.WorldId" asp-route-accountCheck="@Convert.ToInt32(User.FindFirstValue(ClaimTypes.NameIdentifier))" asp-controller="Game" asp-action="MainGameRazor">Back to map</a>

    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<style>

    .form {
        margin: auto;
        width: 70%;
        border: 3px solid #a09300;
        padding: 10px;
    }

    .readyButton {
        display: inline-block;
        margin-left: 5px;
        margin-bottom: -18px;
    }

    .btn-container, .container {
        background-color: white;
        border-radius: 4px;
        margin-bottom: 40px;
    }

    .tg-list {
        text-align: center;
        display: -webkit-box;
        display: flex;
        -webkit-box-align: center;
        align-items: center;
    }

    .tg-list-item {
        margin: 0 2em;
    }



    .tgl {
        display: none;
    }

        .tgl, .tgl:after, .tgl:before, .tgl *, .tgl *:after, .tgl *:before, .tgl + .tgl-btn {
            box-sizing: border-box;
        }

            .tgl::-moz-selection, .tgl:after::-moz-selection, .tgl:before::-moz-selection, .tgl *::-moz-selection, .tgl *:after::-moz-selection, .tgl *:before::-moz-selection, .tgl + .tgl-btn::-moz-selection {
                background: none;
            }

            .tgl::selection, .tgl:after::selection, .tgl:before::selection, .tgl *::selection, .tgl *:after::selection, .tgl *:before::selection, .tgl + .tgl-btn::selection {
                background: none;
            }

            .tgl + .tgl-btn {
                margin-left: 200px;
                margin-top: -28px;
                outline: 0;
                display: block;
                width: 4em;
                height: 2em;
                position: relative;
                cursor: pointer;
                -webkit-user-select: none;
                -moz-user-select: none;
                -ms-user-select: none;
                user-select: none;
            }

                .tgl + .tgl-btn:after, .tgl + .tgl-btn:before {
                    position: relative;
                    display: block;
                    content: "";
                    width: 50%;
                    height: 100%;
                }

                .tgl + .tgl-btn:after {
                    left: 0;
                }

                .tgl + .tgl-btn:before {
                    display: none;
                }

            .tgl:checked + .tgl-btn:after {
                left: 50%;
            }

    .tgl-light + .tgl-btn {
        background: #f0f0f0;
        border-radius: 2em;
        padding: 2px;
        -webkit-transition: all .4s ease;
        transition: all .4s ease;
    }

        .tgl-light + .tgl-btn:after {
            border-radius: 50%;
            background: #fff;
            -webkit-transition: all .2s ease;
            transition: all .2s ease;
        }

    .tgl-light:checked + .tgl-btn {
        background: #9FD6AE;
    }

    .tgl-ios + .tgl-btn {
        background: #fbfbfb;
        border-radius: 2em;
        padding: 2px;
        -webkit-transition: all .4s ease;
        transition: all .4s ease;
        border: 1px solid #e8eae9;
    }

        .tgl-ios + .tgl-btn:after {
            border-radius: 2em;
            background: #fbfbfb;
            -webkit-transition: left 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275), padding 0.3s ease, margin 0.3s ease;
            transition: left 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275), padding 0.3s ease, margin 0.3s ease;
            box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.1), 0 4px 0 rgba(0, 0, 0, 0.08);
        }

        .tgl-ios + .tgl-btn:hover:after {
            will-change: padding;
        }

        .tgl-ios + .tgl-btn:active {
            box-shadow: inset 0 0 0 2em #e8eae9;
        }

            .tgl-ios + .tgl-btn:active:after {
                padding-right: .8em;
            }

    .tgl-ios:checked + .tgl-btn {
        background: #86d993;
    }

        .tgl-ios:checked + .tgl-btn:active {
            box-shadow: none;
        }

            .tgl-ios:checked + .tgl-btn:active:after {
                margin-left: -.8em;
            }

    .tgl-skewed + .tgl-btn {
        overflow: hidden;
        -webkit-transform: skew(-10deg);
        transform: skew(-10deg);
        -webkit-backface-visibility: hidden;
        backface-visibility: hidden;
        -webkit-transition: all .2s ease;
        transition: all .2s ease;
        font-family: sans-serif;
        background: #888;
    }

        .tgl-skewed + .tgl-btn:after, .tgl-skewed + .tgl-btn:before {
            -webkit-transform: skew(10deg);
            transform: skew(10deg);
            display: inline-block;
            -webkit-transition: all .2s ease;
            transition: all .2s ease;
            width: 100%;
            text-align: center;
            position: absolute;
            line-height: 2em;
            font-weight: bold;
            color: #fff;
            text-shadow: 0 1px 0 rgba(0, 0, 0, 0.4);
        }

        .tgl-skewed + .tgl-btn:after {
            left: 100%;
            content: attr(data-tg-on);
        }

        .tgl-skewed + .tgl-btn:before {
            left: 0;
            content: attr(data-tg-off);
        }

        .tgl-skewed + .tgl-btn:active {
            background: #888;
        }

            .tgl-skewed + .tgl-btn:active:before {
                left: -10%;
            }

    .tgl-skewed:checked + .tgl-btn {
        background: #86d993;
    }

        .tgl-skewed:checked + .tgl-btn:before {
            left: -100%;
        }

        .tgl-skewed:checked + .tgl-btn:after {
            left: 0;
        }

        .tgl-skewed:checked + .tgl-btn:active:after {
            left: 10%;
        }

    .tgl-flat + .tgl-btn {
        padding: 2px;
        -webkit-transition: all .2s ease;
        transition: all .2s ease;
        background: #fff;
        border: 4px solid #f2f2f2;
        border-radius: 2em;
    }

        .tgl-flat + .tgl-btn:after {
            -webkit-transition: all .2s ease;
            transition: all .2s ease;
            background: #f2f2f2;
            content: "";
            border-radius: 1em;
        }

    .tgl-flat:checked + .tgl-btn {
        border: 4px solid #7FC6A6;
    }

        .tgl-flat:checked + .tgl-btn:after {
            left: 50%;
            background: #7FC6A6;
        }

    .tgl-flip + .tgl-btn {
        padding: 2px;
        -webkit-transition: all .2s ease;
        transition: all .2s ease;
        font-family: sans-serif;
        -webkit-perspective: 100px;
        perspective: 100px;
    }

        .tgl-flip + .tgl-btn:after, .tgl-flip + .tgl-btn:before {
            display: inline-block;
            -webkit-transition: all .4s ease;
            transition: all .4s ease;
            width: 100%;
            text-align: center;
            position: absolute;
            line-height: 2em;
            font-weight: bold;
            color: #fff;
            position: absolute;
            top: 0;
            left: 0;
            -webkit-backface-visibility: hidden;
            backface-visibility: hidden;
            border-radius: 4px;
        }

        .tgl-flip + .tgl-btn:after {
            content: attr(data-tg-on);
            background: #02C66F;
            -webkit-transform: rotateY(-180deg);
            transform: rotateY(-180deg);
        }

        .tgl-flip + .tgl-btn:before {
            background: #FF3A19;
            content: attr(data-tg-off);
        }

        .tgl-flip + .tgl-btn:active:before {
            -webkit-transform: rotateY(-20deg);
            transform: rotateY(-20deg);
        }

    .tgl-flip:checked + .tgl-btn:before {
        -webkit-transform: rotateY(180deg);
        transform: rotateY(180deg);
    }

    .tgl-flip:checked + .tgl-btn:after {
        -webkit-transform: rotateY(0);
        transform: rotateY(0);
        left: 0;
        background: #7FC6A6;
    }

    .tgl-flip:checked + .tgl-btn:active:after {
        -webkit-transform: rotateY(20deg);
        transform: rotateY(20deg);
    }
</style>
